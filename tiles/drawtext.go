package tiles

import (
	"image"
	"image/color"
	"image/draw"
)

// Мини-шрифт 3x5 (моноширинный). Каждый байт — 1 бит (старший слева).
// Поддержаны ASCII 32..95 (пробел, !, .., _, A..Z, [, \, ], ^, _), и a..z, 0..9, общие знаки.
// Это не красота, но годится для атрибуции мелким шрифтом без зависимостей.
var miniFont = map[rune][5]byte{
	' ': {0x00, 0x00, 0x00, 0x00, 0x00},
	'.': {0x00, 0x00, 0x00, 0x40, 0x00},
	',': {0x00, 0x00, 0x00, 0x40, 0x80},
	':': {0x00, 0x40, 0x00, 0x40, 0x00},
	'-': {0x00, 0x00, 0xE0, 0x00, 0x00},
	'_': {0x00, 0x00, 0x00, 0x00, 0xE0},
	'/': {0x20, 0x20, 0x40, 0x80, 0x80},
	'\\': {0x80, 0x80, 0x40, 0x20, 0x20},
	'(': {0x20, 0x40, 0x40, 0x40, 0x20},
	')': {0x80, 0x40, 0x40, 0x40, 0x80},
	'[': {0xE0, 0x80, 0x80, 0x80, 0xE0},
	']': {0xE0, 0x20, 0x20, 0x20, 0xE0},
	'\'': {0x80, 0x80, 0x00, 0x00, 0x00},
	'"': {0xA0, 0xA0, 0x00, 0x00, 0x00},
	'!': {0x80, 0x80, 0x80, 0x00, 0x80},
	'?': {0xE0, 0x20, 0x40, 0x00, 0x40},
	'+': {0x00, 0x40, 0xE0, 0x40, 0x00},
	'@': {0xE0, 0xA0, 0xE0, 0x80, 0xE0},
	'#': {0xA0, 0xE0, 0xA0, 0xE0, 0xA0},
	'%': {0xA0, 0x20, 0x40, 0x80, 0xA0},
	'&': {0x40, 0x80, 0x60, 0xA0, 0x60},
	'*': {0x00, 0xA0, 0x40, 0xA0, 0x00},
	'=': {0x00, 0xE0, 0x00, 0xE0, 0x00},

	'0': {0xE0, 0xA0, 0xA0, 0xA0, 0xE0},
	'1': {0x40, 0xC0, 0x40, 0x40, 0xE0},
	'2': {0xE0, 0x20, 0xE0, 0x80, 0xE0},
	'3': {0xE0, 0x20, 0x60, 0x20, 0xE0},
	'4': {0xA0, 0xA0, 0xE0, 0x20, 0x20},
	'5': {0xE0, 0x80, 0xE0, 0x20, 0xE0},
	'6': {0x60, 0x80, 0xE0, 0xA0, 0xE0},
	'7': {0xE0, 0x20, 0x40, 0x40, 0x40},
	'8': {0xE0, 0xA0, 0xE0, 0xA0, 0xE0},
	'9': {0xE0, 0xA0, 0xE0, 0x20, 0x60},

	'A': {0x40, 0xA0, 0xE0, 0xA0, 0xA0},
	'B': {0xC0, 0xA0, 0xC0, 0xA0, 0xC0},
	'C': {0x60, 0x80, 0x80, 0x80, 0x60},
	'D': {0xC0, 0xA0, 0xA0, 0xA0, 0xC0},
	'E': {0xE0, 0x80, 0xE0, 0x80, 0xE0},
	'F': {0xE0, 0x80, 0xE0, 0x80, 0x80},
	'G': {0x60, 0x80, 0xA0, 0xA0, 0x60},
	'H': {0xA0, 0xA0, 0xE0, 0xA0, 0xA0},
	'I': {0xE0, 0x40, 0x40, 0x40, 0xE0},
	'J': {0x20, 0x20, 0x20, 0xA0, 0x40},
	'K': {0xA0, 0xA0, 0xC0, 0xA0, 0xA0},
	'L': {0x80, 0x80, 0x80, 0x80, 0xE0},
	'M': {0xA0, 0xE0, 0xE0, 0xA0, 0xA0},
	'N': {0xA0, 0xE0, 0xE0, 0xE0, 0xA0},
	'O': {0x40, 0xA0, 0xA0, 0xA0, 0x40},
	'P': {0xC0, 0xA0, 0xC0, 0x80, 0x80},
	'Q': {0x40, 0xA0, 0xA0, 0xE0, 0x60},
	'R': {0xC0, 0xA0, 0xC0, 0xA0, 0xA0},
	'S': {0x60, 0x80, 0x60, 0x20, 0xC0},
	'T': {0xE0, 0x40, 0x40, 0x40, 0x40},
	'U': {0xA0, 0xA0, 0xA0, 0xA0, 0xE0},
	'V': {0xA0, 0xA0, 0xA0, 0xA0, 0x40},
	'W': {0xA0, 0xA0, 0xE0, 0xE0, 0xA0},
	'X': {0xA0, 0xA0, 0x40, 0xA0, 0xA0},
	'Y': {0xA0, 0xA0, 0x40, 0x40, 0x40},
	'Z': {0xE0, 0x20, 0x40, 0x80, 0xE0},

	'a': {0x00, 0x60, 0x20, 0xA0, 0xE0},
	'b': {0x80, 0xC0, 0xA0, 0xA0, 0xC0},
	'c': {0x00, 0x60, 0x80, 0x80, 0x60},
	'd': {0x20, 0x60, 0xA0, 0xA0, 0x60},
	'e': {0x00, 0x60, 0xA0, 0xC0, 0x60},
	'f': {0x20, 0x40, 0xE0, 0x40, 0x40},
	'g': {0x00, 0x60, 0xA0, 0x60, 0x20},
	'h': {0x80, 0xC0, 0xA0, 0xA0, 0xA0},
	'i': {0x40, 0x00, 0x40, 0x40, 0xE0},
	'j': {0x20, 0x00, 0x20, 0xA0, 0x40},
	'k': {0x80, 0xA0, 0xC0, 0xA0, 0xA0},
	'l': {0x40, 0x40, 0x40, 0x40, 0x20},
	'm': {0x00, 0xE0, 0xE0, 0xA0, 0xA0},
	'n': {0x00, 0xC0, 0xA0, 0xA0, 0xA0},
	'o': {0x00, 0x40, 0xA0, 0xA0, 0x40},
	'p': {0x00, 0xC0, 0xA0, 0xC0, 0x80},
	'q': {0x00, 0x60, 0xA0, 0x60, 0x20},
	'r': {0x00, 0x60, 0x80, 0x80, 0x80},
	's': {0x00, 0x60, 0x40, 0x20, 0xC0},
	't': {0x40, 0xE0, 0x40, 0x40, 0x20},
	'u': {0x00, 0xA0, 0xA0, 0xA0, 0x60},
	'v': {0x00, 0xA0, 0xA0, 0xA0, 0x40},
	'w': {0x00, 0xA0, 0xE0, 0xE0, 0x40},
	'x': {0x00, 0xA0, 0x40, 0xA0, 0xA0},
	'y': {0x00, 0xA0, 0xA0, 0x60, 0x20},
	'z': {0x00, 0xE0, 0x20, 0x40, 0xE0},
}

func DrawAttribution(img *image.RGBA, text string) {
	if text == "" {
		return
	}
	b := img.Bounds()
	padding := 6
	// estimate width: 4 px per char (3 glyph + 1 space)
	w := len([]rune(text))*4 + padding*2
	h := 5 + padding*2

	x := b.Max.X - w - 6
	y := b.Max.Y - h - 6
	if x < 0 {
		x = 0
	}
	if y < 0 {
		y = 0
	}
	// bg panel (semi-transparent black)
	bg := image.NewUniform(color.RGBA{0, 0, 0, 120})
	draw.Draw(img, image.Rect(x, y, x+w, y+h), bg, image.Point{}, draw.Over)

	fg := color.RGBA{255, 255, 255, 220}
	drawMiniText(img, x+padding, y+padding, text, fg)
}

func drawMiniText(dst *image.RGBA, x, y int, s string, col color.Color) {
	for _, r := range []rune(s) {
		g, ok := miniFont[r]
		if !ok {
			g = miniFont['?']
		}
		// 3 columns (bits 7..5), 5 rows
		for row := 0; row < 5; row++ {
			line := g[row]
			for colBit := 0; colBit < 3; colBit++ {
				if (line & (0x80 >> colBit)) != 0 {
					dst.Set(x+colBit, y+row, col)
				}
			}
		}
		x += 4 // 3px glyph + 1px space
	}
}
